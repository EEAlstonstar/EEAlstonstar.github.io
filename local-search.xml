<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hadoop 原理简介</title>
    <link href="/2023/07/12/Hadoop%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/07/12/Hadoop%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Hadoop原理"><a href="#一、Hadoop原理" class="headerlink" title="一、Hadoop原理"></a>一、Hadoop原理</h1><h2 id="1-1-Hadoop核心架构"><a href="#1-1-Hadoop核心架构" class="headerlink" title="1.1 Hadoop核心架构"></a>1.1 Hadoop核心架构</h2><p><strong>Hadoop&#x3D;Hbase+MapReduce+HDFS</strong></p><p>Hbase：实时分布式数据库</p><p>MapReduce：分布式计算框架</p><p>HDFS：分布式文件系统</p><h2 id="1-2-各部分工作原理"><a href="#1-2-各部分工作原理" class="headerlink" title="1.2 各部分工作原理"></a>1.2 各部分工作原理</h2><p><strong>首先来看HDFS：</strong></p><p>HDFS是典型的主从式架构，采用TCP&#x2F;IP通信，具体架构图如下：</p><p><img src="/2023/07/12/Hadoop%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/image.png" alt="架构图"></p><p><strong>NameNode</strong>：是Master节点（主节点），可以看作是分布式文件系统中的<strong>管理者</strong>，负责管理文件系统的命名空间、集群配置信息和存储块的复制等。包括了文件信息、每一个文件对应的文件块的信息和每一个文件块在DataNode的信息等。</p><p><strong>DataNode</strong>：是Slave节点（从节点），<strong>文件存储的基本单元</strong>，它将Block存储在本地文件系统中，保存了Block的Meta-data，同时周期性地将所有存在的Block信息发送给NameNode。</p><p><strong>Client</strong>：切分文件；访问HDFS；与NameNode交互，获得文件位置信息；与DataNode交互，读取和写入数据。 </p><p><strong>Block</strong>：HDFS中的基本读写单元；HDFS中的文件都是被切割为block（块）进行存储的；这些块被复制到多个DataNode中；块的大小（通常为64MB）和复制的块数量在创建文件时由Client决定。</p><hr><p><strong>写入流程</strong></p><p><img src="/2023/07/12/Hadoop%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/image-1.png" alt="写入流程"></p><p><strong>请注意！作为大数据平台搭建者，身份应该是服务者server而非client</strong></p><ol><li><p>用户向Client（客户机）提出请求。例如，需要写入200MB的数据。</p></li><li><p>Client制定计划：将数据按照64MB为块，进行切割；所有的块都保存三份。</p><blockquote><p><em>HDFS具有<strong>高容错性</strong>的特点，通过增加副本的形式，提高容错性。某一个副本丢失以后，可以自动恢复</em></p></blockquote></li><li><p>Client将大文件切分成块（block）</p><blockquote><p><em>HDFS<strong>适合处理大数据</strong>，能够处理数据规模达到GB\TB、甚至PB级别的数据</em></p></blockquote></li><li><p>针对第一个块，Client告诉NameNode（主控节点），请帮助我，将64MB的块复制三份.</p></li><li><p>NameNode告诉Client三个DataNode（数据节点）的地址，并且将它们根据到Client的距离，进行了排序。</p></li><li><p>Client把数据和清单发给第一个DataNode。</p></li><li><p>第一个DataNode将数据复制给第二个DataNode。</p><blockquote><p><em>不适合<strong>低延时数据</strong>访问，比如毫秒级的存储数据，是做不到的</em><br><em>无法高效的对大量小文件进行<strong>存储</strong></em></p></blockquote></li><li><p>第二个DataNode将数据复制给第三个DataNode。</p></li><li><p>如果某一个块的所有数据都已写入，就会向NameNode反馈已完成。</p></li><li><p>对第二个Block，也进行相同的操作。</p><blockquote><p><em>不支持并发写入、文件随机修改。仅支持append（追加）</em></p></blockquote></li><li><p>所有Block都完成后，关闭文件。NameNode会将数据持久化到磁盘上。</p></li></ol><p><strong>读取流程</strong></p><p><img src="/2023/07/12/Hadoop%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/image-2.png" alt="读取流程"></p><ol><li><p>用户向Client提出读取请求。</p></li><li><p>Client向NameNode请求这个文件的所有信息。</p></li><li><p>NameNode将给Client这个文件的块列表，以及存储各个块的数据节点清单（按照和客户端的距离排序）。</p></li><li><p>Client从距离最近的数据节点下载所需的块。</p></li></ol><h2 id="适合一次读入、多次读出的场景，且不支持文件的修改。适合用来做数据分析，非不是网盘应用"><a href="#适合一次读入、多次读出的场景，且不支持文件的修改。适合用来做数据分析，非不是网盘应用" class="headerlink" title="适合一次读入、多次读出的场景，且不支持文件的修改。适合用来做数据分析，非不是网盘应用"></a><strong>适合一次读入、多次读出的场景，且不支持文件的修改。适合用来做数据分析，非不是网盘应用</strong></h2><p><strong>再来看看MapReduce</strong></p><hr><h1 id="二、设计方案与具体细节"><a href="#二、设计方案与具体细节" class="headerlink" title="二、设计方案与具体细节"></a>二、设计方案与具体细节</h1><h2 id="2-1-设计用于爬虫程序读取数据的GUI窗口"><a href="#2-1-设计用于爬虫程序读取数据的GUI窗口" class="headerlink" title="2.1  设计用于爬虫程序读取数据的GUI窗口"></a>2.1  设计用于爬虫程序读取数据的GUI窗口</h2><p>针对爬取图片这一问题，首先我们定义一个图形窗口用来获得用户需求。基于此，我使用python的tkinter包达成这一目的。为了达到我们预想中的GUI界面实现效果，首先要明确的是，为了更方便的从界面中获取数据值，所以我们的变量应当都是全局变量方便调用。基于此，我们分成以下步骤进行实现框架。</p><hr><p>1.在窗口的设计方面；新建Img文件夹，可以制作.ico后缀照片作为窗口样式，背景上可以通过tkinter中的ImageTK.PhotoImage引入自己想要的图片，然后使用place进行放置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">    iconPath = <span class="hljs-string">&#x27;..\Img\\favicon.ico&#x27;</span><br>    window = Tk()<br>    window.title(<span class="hljs-string">&#x27;python爬虫读取页面&#x27;</span>)<br>    image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;Img\background (2).gif&#x27;</span>)<br>    background_image = ImageTk.PhotoImage(image2)<br>    w = background_image.width()<br>    h = background_image.height()<br>    window.geometry(<span class="hljs-string">&#x27;%dx%d+0+0&#x27;</span> % (w, h))<br>    background_label = Label(window, image=background_image)<br>    background_label.place(x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>, relwidth=<span class="hljs-number">1</span>, relheight=<span class="hljs-number">1</span>)<br>    window.iconbitmap(iconPath)<br>``````<br>- - -<br><span class="hljs-number">2.</span>在窗口的部件设置上；首先必要的是文字提示语与输入框。包括关键词与照片数量、存储文件夹名，可以通过label标签以及Entry输入来实现这一功能。其次是显示爬虫进度的小窗，包括显示爬取的照片数量以及图片地址，可以通过引入treeview这一方法，同时设计column顶部与scrollbar侧边滑动条来使得界面更加美观。最后是启动按钮与退出按钮，可以直接使用button标签来达到这一功能。<br>```python<br>Label(window, text=<span class="hljs-string">&quot;请输入想爬取图片关键词1：&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), fg=<span class="hljs-string">&quot;black&quot;</span>,bg=<span class="hljs-string">&quot;pink&quot;</span>).place(x=<span class="hljs-number">205</span>, y=<span class="hljs-number">0</span>, anchor=NW)<br>label1_input = Entry(window, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), width=<span class="hljs-number">5</span>)<br>label1_input.place(x=<span class="hljs-number">455</span>, y=<span class="hljs-number">0</span>)<br>Label(window, text=<span class="hljs-string">&quot;请输入想爬取的图片个数：&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), fg=<span class="hljs-string">&quot;black&quot;</span>, bg=<span class="hljs-string">&quot;pink&quot;</span>).place(x=<span class="hljs-number">525</span>, y=<span class="hljs-number">0</span>)<br>data1_input = Entry(window, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), width=<span class="hljs-number">5</span>)<br>data1_input.place(x=<span class="hljs-number">765</span>, y=<span class="hljs-number">0</span>)<br>Label(window, text=<span class="hljs-string">&quot;请输入存储文件夹：&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), fg=<span class="hljs-string">&quot;black&quot;</span>, bg=<span class="hljs-string">&quot;pink&quot;</span>).place(x=<span class="hljs-number">835</span>, y=<span class="hljs-number">0</span>)<br>location1_input = Entry(window, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), width=<span class="hljs-number">5</span>)<br>location1_input.place(x=<span class="hljs-number">1020</span>, y=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">treeview_width = w - <span class="hljs-number">40</span><br>treeview_height = h / <span class="hljs-number">2</span> - <span class="hljs-number">30</span><br><span class="hljs-keyword">global</span> tree<br>tree = ttk.Treeview(window, height=<span class="hljs-number">10</span>, show=<span class="hljs-string">&#x27;headings&#x27;</span>, selectmode=<span class="hljs-string">&#x27;browse&#x27;</span>,<br>                        takefocus=<span class="hljs-literal">True</span>,columns=(<span class="hljs-string">&quot;totalCount&quot;</span>, <span class="hljs-string">&quot;Name&quot;</span>))<br>tree.column(<span class="hljs-string">&quot;totalCount&quot;</span>, width=<span class="hljs-built_in">int</span>(treeview_width * <span class="hljs-number">0.1</span>))<br>tree.column(<span class="hljs-string">&quot;Name&quot;</span>, width=<span class="hljs-built_in">int</span>(treeview_width * <span class="hljs-number">0.9</span>))<br>tree.heading(<span class="hljs-string">&quot;totalCount&quot;</span>, text=<span class="hljs-string">&quot;序号&quot;</span>,command=<span class="hljs-keyword">lambda</span> c=<span class="hljs-string">&quot;totalCount&quot;</span>:treeview_sort_column(tree, c, <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;float&#x27;</span>))<br>tree.heading(<span class="hljs-string">&quot;Name&quot;</span>, text=<span class="hljs-string">&quot;图片地址&quot;</span>, command=<span class="hljs-keyword">lambda</span> c=<span class="hljs-string">&quot;Name&quot;</span>:treeview_sort_column(tree, c, <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;str&#x27;</span>))<br>yscroll = Scrollbar(tree, orient=VERTICAL)<br>yscroll[<span class="hljs-string">&#x27;command&#x27;</span>] = tree.yview<br>yscroll.pack(side=RIGHT, fill=BOTH)<br>tree[<span class="hljs-string">&#x27;yscrollcommand&#x27;</span>] = yscroll.<span class="hljs-built_in">set</span><br>tree.place(x=<span class="hljs-number">10</span>, y=<span class="hljs-number">20</span> + h / <span class="hljs-number">2</span>, width=treeview_width, height=treeview_height)<br></code></pre></td></tr></table></figure><hr><p>3.“开始下载”与“结束”的按钮设计.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">button1 = Button(window, text=<span class="hljs-string">&quot;开始下载&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>),<br>                     command=crawler_content).place(x=<span class="hljs-number">580</span>, y=<span class="hljs-number">95</span>)<br>button2 = Button(window, text=<span class="hljs-string">&quot;分类（请运行network程序）&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>),<br>                     command=window.quit).place(x=<span class="hljs-number">500</span>, y=<span class="hljs-number">145</span>)<br>window.mainloop()<br></code></pre></td></tr></table></figure><h2 id="2-2-爬虫主函数实现"><a href="#2-2-爬虫主函数实现" class="headerlink" title="2.2 爬虫主函数实现"></a>2.2 爬虫主函数实现</h2><p>上文的button1的(<code>commend= crawler_content</code>)这一功能实际上是在执行名为crawler_content的函数。这是爬虫实现的主函数，主要功能是得到GUI窗口的关键词、图片数量、文件夹名字等数据。并且运行“crawler”模块实现下载和获取推荐词的功能。  </p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
      <tag>实习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建一个基于爬虫功能图像三分类系统</title>
    <link href="/2023/07/12/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8E%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF%E7%9A%84%E5%9B%BE%E5%83%8F%E4%B8%89%E5%88%86%E7%B1%BB%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/07/12/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8E%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF%E7%9A%84%E5%9B%BE%E5%83%8F%E4%B8%89%E5%88%86%E7%B1%BB%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、功能分析"><a href="#一、功能分析" class="headerlink" title="一、功能分析"></a>一、功能分析</h1><p>整个任务就分成两个大类。一是爬虫技术，二是图像识别。<br>首先是爬虫技术，为了满足其后图像识别的三分类效果，应当设计一个可根据关键词进行搜索的功能。因而最佳的爬取网站就是百度。<br>其次是图像识别，本报告着重应用其图像分类功能。通过搭建神经网络，与划分数据集的方式进行识别。并做一个简单的训练可视化。<br>在确定了根据关键词爬取百度图片+神经网络三分类的基本思路后。再来确定关键的模块化与GUI界面。<br>首先关于模块化、多线程等技术，则任务需要分程序实现，应当有一个主函数以及多个负责爬虫、神经网络识别、GUI窗口的模块。<br>其次是关于图形界面的问题，即GUI窗口。可以使用tkinter包来实现这以功能。为了保证整体美观的效果。也可考虑对GUI窗口进行一定程度上的设计，包括增添背景图片、添加文字说明等。<br>根据上述分析，本任务主要需求为：<br>1.搭建一个可以基于用户的三个关键词进行爬取的爬虫系统。并且设计出有关爬虫的GUI界面；<br>2.归纳整理爬取的数据为数据集。设计程序进行测试集与验证集划分；<br>3.设计一个神经网络进行图像识别分类任务。同时写train与test函数进行验证与训练。可保留训练日志；<br>4.设计一个图像识别相关界面，进行训练可视化。</p><hr><h1 id="二、设计方案与具体细节"><a href="#二、设计方案与具体细节" class="headerlink" title="二、设计方案与具体细节"></a>二、设计方案与具体细节</h1><h2 id="2-1-设计用于爬虫程序读取数据的GUI窗口"><a href="#2-1-设计用于爬虫程序读取数据的GUI窗口" class="headerlink" title="2.1  设计用于爬虫程序读取数据的GUI窗口"></a>2.1  设计用于爬虫程序读取数据的GUI窗口</h2><p>针对爬取图片这一问题，首先我们定义一个图形窗口用来获得用户需求。基于此，我使用python的tkinter包达成这一目的。为了达到我们预想中的GUI界面实现效果，首先要明确的是，为了更方便的从界面中获取数据值，所以我们的变量应当都是全局变量方便调用。基于此，我们分成以下步骤进行实现框架。</p><hr><p>1.在窗口的设计方面；新建Img文件夹，可以制作.ico后缀照片作为窗口样式，背景上可以通过tkinter中的ImageTK.PhotoImage引入自己想要的图片，然后使用place进行放置。<br>‘’’iconPath &#x3D; ‘..\Img\favicon.ico’<br>    window &#x3D; Tk()<br>    window.title(‘python爬虫读取页面’)<br>    image2 &#x3D; Image.open(r’Img\background (2).gif’)<br>    background_image &#x3D; ImageTk.PhotoImage(image2)<br>    w &#x3D; background_image.width()<br>    h &#x3D; background_image.height()<br>    window.geometry(‘%dx%d+0+0’ % (w, h))<br>    background_label &#x3D; Label(window, image&#x3D;background_image)<br>    background_label.place(x&#x3D;0, y&#x3D;0, relwidth&#x3D;1, relheight&#x3D;1)<br>    window.iconbitmap(iconPath)’’’</p><hr><p>2.在窗口的部件设置上；首先必要的是文字提示语与输入框。包括关键词与照片数量、存储文件夹名，可以通过label标签以及Entry输入来实现这一功能。其次是显示爬虫进度的小窗，包括显示爬取的照片数量以及图片地址，可以通过引入treeview这一方法，同时设计column顶部与scrollbar侧边滑动条来使得界面更加美观。最后是启动按钮与退出按钮，可以直接使用button标签来达到这一功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Label(window, text=<span class="hljs-string">&quot;请输入想爬取图片关键词1：&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), fg=<span class="hljs-string">&quot;black&quot;</span>,bg=<span class="hljs-string">&quot;pink&quot;</span>).place(x=<span class="hljs-number">205</span>, y=<span class="hljs-number">0</span>, anchor=NW)<br>label1_input = Entry(window, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), width=<span class="hljs-number">5</span>)<br>label1_input.place(x=<span class="hljs-number">455</span>, y=<span class="hljs-number">0</span>)<br>Label(window, text=<span class="hljs-string">&quot;请输入想爬取的图片个数：&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), fg=<span class="hljs-string">&quot;black&quot;</span>, bg=<span class="hljs-string">&quot;pink&quot;</span>).place(x=<span class="hljs-number">525</span>, y=<span class="hljs-number">0</span>)<br>data1_input = Entry(window, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), width=<span class="hljs-number">5</span>)<br>data1_input.place(x=<span class="hljs-number">765</span>, y=<span class="hljs-number">0</span>)<br>Label(window, text=<span class="hljs-string">&quot;请输入存储文件夹：&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), fg=<span class="hljs-string">&quot;black&quot;</span>, bg=<span class="hljs-string">&quot;pink&quot;</span>).place(x=<span class="hljs-number">835</span>, y=<span class="hljs-number">0</span>)<br>location1_input = Entry(window, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>), width=<span class="hljs-number">5</span>)<br>location1_input.place(x=<span class="hljs-number">1020</span>, y=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">treeview_width = w - <span class="hljs-number">40</span><br>treeview_height = h / <span class="hljs-number">2</span> - <span class="hljs-number">30</span><br><span class="hljs-keyword">global</span> tree<br>tree = ttk.Treeview(window, height=<span class="hljs-number">10</span>, show=<span class="hljs-string">&#x27;headings&#x27;</span>, selectmode=<span class="hljs-string">&#x27;browse&#x27;</span>,<br>                        takefocus=<span class="hljs-literal">True</span>,columns=(<span class="hljs-string">&quot;totalCount&quot;</span>, <span class="hljs-string">&quot;Name&quot;</span>))<br>tree.column(<span class="hljs-string">&quot;totalCount&quot;</span>, width=<span class="hljs-built_in">int</span>(treeview_width * <span class="hljs-number">0.1</span>))<br>tree.column(<span class="hljs-string">&quot;Name&quot;</span>, width=<span class="hljs-built_in">int</span>(treeview_width * <span class="hljs-number">0.9</span>))<br>tree.heading(<span class="hljs-string">&quot;totalCount&quot;</span>, text=<span class="hljs-string">&quot;序号&quot;</span>,command=<span class="hljs-keyword">lambda</span> c=<span class="hljs-string">&quot;totalCount&quot;</span>:treeview_sort_column(tree, c, <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;float&#x27;</span>))<br>tree.heading(<span class="hljs-string">&quot;Name&quot;</span>, text=<span class="hljs-string">&quot;图片地址&quot;</span>, command=<span class="hljs-keyword">lambda</span> c=<span class="hljs-string">&quot;Name&quot;</span>:treeview_sort_column(tree, c, <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;str&#x27;</span>))<br>yscroll = Scrollbar(tree, orient=VERTICAL)<br>yscroll[<span class="hljs-string">&#x27;command&#x27;</span>] = tree.yview<br>yscroll.pack(side=RIGHT, fill=BOTH)<br>tree[<span class="hljs-string">&#x27;yscrollcommand&#x27;</span>] = yscroll.<span class="hljs-built_in">set</span><br>tree.place(x=<span class="hljs-number">10</span>, y=<span class="hljs-number">20</span> + h / <span class="hljs-number">2</span>, width=treeview_width, height=treeview_height)<br></code></pre></td></tr></table></figure><hr><p>3.“开始下载”与“结束”的按钮设计.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">button1 = Button(window, text=<span class="hljs-string">&quot;开始下载&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>),<br>                     command=crawler_content).place(x=<span class="hljs-number">580</span>, y=<span class="hljs-number">95</span>)<br>button2 = Button(window, text=<span class="hljs-string">&quot;分类（请运行network程序）&quot;</span>, font=(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">15</span>),<br>                     command=window.quit).place(x=<span class="hljs-number">500</span>, y=<span class="hljs-number">145</span>)<br>window.mainloop()<br></code></pre></td></tr></table></figure><h2 id="2-2-爬虫主函数实现"><a href="#2-2-爬虫主函数实现" class="headerlink" title="2.2 爬虫主函数实现"></a>2.2 爬虫主函数实现</h2><p>上文的button1的(<code>commend= crawler_content</code>)这一功能实际上是在执行名为crawler_content的函数。这是爬虫实现的主函数，主要功能是得到GUI窗口的关键词、图片数量、文件夹名字等数据。并且运行“crawler”模块实现下载和获取推荐词的功能。  </p>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
      <tag>爬虫</tag>
      
      <tag>GUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/12/hello-world/"/>
    <url>/2023/07/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
